// @ts-nocheck

// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

/** user-defined commands **/


export const commands = {
/**
 * Pushes a specific branch to the remote repository
 */
async pushBranch(params: PushBranchParams) : Promise<Result<string, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("push_branch", { params }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
/**
 * Synchronizes branches by grouping commits by prefix and creating/updating branches
 */
async syncBranches(params: SyncBranchesParams, progress: TAURI_CHANNEL<SyncEvent>) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("sync_branches", { params, progress }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getBranchPrefixFromGitConfig(params: GetBranchPrefixParams) : Promise<Result<string, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_branch_prefix_from_git_config", { params }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
/**
 * Opens a native file dialog to browse for a git repository
 */
async browseRepository() : Promise<Result<BrowseResult, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("browse_repository") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
/**
 * Validates that a repository path exists and is a git repository
 * Returns empty string if valid, error message if invalid
 */
async validateRepositoryPath(params: ValidateRepositoryPathParams) : Promise<Result<string, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("validate_repository_path", { params }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async checkForUpdates() : Promise<Result<UpdateInfo, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("check_for_updates") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getUpdateStatus() : Promise<Result<UpdateInfo, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_update_status") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async installUpdate() : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("install_update") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async openSubWindow(params: OpenSubWindowParams) : Promise<Result<null, WindowError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("open_sub_window", { params }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
/**
 * Assigns commits to a branch by prepending a branch prefix to their messages.
 * Uses git plumbing commands to efficiently rewrite commit messages without touching the working directory.
 */
async createBranchFromCommits(params: CreateBranchFromCommitsParams) : Promise<Result<RewordResult, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("create_branch_from_commits", { params }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
/**
 * Adds an issue reference to commits in a branch that don't already have one.
 * Updates commit messages from "(branch-name) message" to "(branch-name) ISSUE-123 message"
 */
async addIssueReferenceToCommits(params: AddIssueReferenceParams) : Promise<Result<AddIssueReferenceResult, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("add_issue_reference_to_commits", { params }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async suggestBranchNameStream(params: SuggestBranchNameParams, progress: TAURI_CHANNEL<SuggestionProgress>) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("suggest_branch_name_stream", { params, progress }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async downloadModel(progress: TAURI_CHANNEL<DownloadProgress>) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("download_model", { progress }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async checkModelStatus() : Promise<Result<ModelStatus, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("check_model_status") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async clearModelCache(params: ClearModelCacheParams) : Promise<Result<CacheClearResult, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("clear_model_cache", { params }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
}
}

/** user-defined events **/



/** user-defined constants **/



/** user-defined types **/

export type AddIssueReferenceParams = { repositoryPath: string; branchName: string; commits: CommitInfo[]; issueReference: string }
export type AddIssueReferenceResult = { success: boolean; updatedCount: number; skippedCount: number }
/**
 * Branch operation errors.
 */
export type BranchError = { Generic: string } | { MergeConflict: MergeConflictInfo }
export type BranchSuggestion = { name: string; confidence: number; reason: string | null }
/**
 * Status of a branch synchronization operation.
 */
export type BranchSyncStatus = "Created" | "Updated" | "Unchanged" | "Error" | "MergeConflict" | "AnalyzingConflict"
/**
 * Result of browsing for a repository
 */
export type BrowseResult = { path: string | null; valid: boolean; error: string | null }
export type CacheClearResult = { cleared_models: string[]; total_size_mb: number; errors: string[] }
export type ClearModelCacheParams = { keepCurrent: boolean }
/**
 * Struct to hold commit data returned by git CLI
 */
export type Commit = { originalHash: string; strippedSubject: string; message: string; author: string; authorTime: number; committerTime: number }
/**
 * Simple commit information with hash and message.
 * Used for passing commit data between frontend and backend.
 */
export type CommitInfo = { hash: string; message: string }
/**
 * Status of a commit synchronization.
 */
export type CommitSyncStatus = "Pending" | "Created" | "Unchanged" | "Error" | "Blocked"
/**
 * Analysis results for a merge conflict, including missing commits and divergence information.
 */
export type ConflictAnalysis = { missingCommits: MissingCommit[]; mergeBaseHash: string; mergeBaseSubject: string; mergeBaseMessage: string; mergeBaseTime: number; mergeBaseAuthor: string; divergenceSummary: DivergenceSummary }
/**
 * Represents details of a conflict during a cherry-pick operation.
 * 
 * Includes the path of the conflicted file, its status, and the diff details for the conflict.
 */
export type ConflictDetail = { file: string; status: string; fileDiff: FileDiff; baseFile: FileInfo | null; targetFile: FileInfo | null; cherryFile: FileInfo | null; baseToTargetDiff: FileDiff; baseToCherryDiff: FileDiff }
/**
 * Information about a commit referenced in conflict markers
 */
export type ConflictMarkerCommitInfo = { hash: string; message: string; author: string; authorTime: number; committerTime: number }
export type CreateBranchFromCommitsParams = { repositoryPath: string; branchName: string; commitIds: string[] }
/**
 * Summary of how two branches have diverged from their common ancestor.
 */
export type DivergenceSummary = { commitsAheadInSource: number; commitsAheadInTarget: number; commonAncestorDistance: number }
export type DownloadProgress = { type: "Started"; data: { totalFiles: number } } | { type: "FileStarted"; data: { fileName: string; fileSize: number | null } } | { type: "Progress"; data: { fileName: string; downloaded: number; total: number; bytesPerSecond: number | null; secondsRemaining: number | null } } | { type: "FileCompleted"; data: { fileName: string } } | { type: "Completed" } | { type: "Error"; data: { message: string } }
/**
 * Represents the diff between two versions of a file.
 */
export type FileDiff = { oldFile: FileInfo; newFile: FileInfo; hunks: string[] }
/**
 * Information about a file including its content and metadata.
 */
export type FileInfo = { fileName: string; fileLang: string; content: string }
export type GetBranchPrefixParams = { repositoryPath: string }
export type GroupedBranchInfo = { name: string; commits: Commit[]; latestCommitTime: number }
/**
 * Details about a merge conflict encountered during a cherry-pick operation.
 * 
 * Contains information about the conflicting files, associated commit details, and conflict analysis results.
 */
export type MergeConflictInfo = { commitMessage: string; commitHash: string; commitAuthorTime: number; commitCommitterTime: number; originalParentMessage: string; originalParentHash: string; originalParentAuthorTime: number; originalParentCommitterTime: number; targetBranchMessage: string; targetBranchHash: string; targetBranchAuthorTime: number; targetBranchCommitterTime: number; conflictingFiles: ConflictDetail[]; conflictAnalysis: ConflictAnalysis; conflictMarkerCommits: Partial<{ [key in string]: ConflictMarkerCommitInfo }> }
/**
 * Represents a commit that exists in the source branch but is missing from the target branch.
 * These commits might be causing merge conflicts.
 */
export type MissingCommit = { hash: string; subject: string; message: string; authorTime: number; committerTime: number; author: string; filesTouched: string[]; fileDiffs: FileDiff[] }
export type ModelFilesStatus = { config: boolean; model: boolean; tokenizer: boolean }
export type ModelStatus = { available: boolean; modelName: string; modelSize: string; filesPresent: ModelFilesStatus }
export type OpenSubWindowParams = { windowId: string; url: string; title: string; width: number | null; height: number | null; data: string }
export type PushBranchParams = { repositoryPath: string; branchPrefix: string; branchName: string }
export type RewordResult = { success: boolean; message: string; reworded_count: number }
export type SuggestBranchNameParams = { repositoryPath: string; branchPrefix: string; commits: CommitInfo[] }
export type SuggestionProgress = { type: "Started"; data: { total: number } } | { type: "SuggestionReady"; data: { suggestion: BranchSuggestion; index: number } } | { type: "Completed" } | { type: "Cancelled" } | { type: "Error"; data: { message: string } } | { type: "ModelDownloadInProgress"; data: { model_name: string; model_size: string } }
export type SyncBranchesParams = { repositoryPath: string; branchPrefix: string }
export type SyncEvent = 
/**
 * Sent immediately after grouping commits
 */
{ type: "branchesGrouped"; data: { branches: GroupedBranchInfo[] } } | 
/**
 * Sent for commits that don't match any prefix pattern
 */
{ type: "unassignedCommits"; data: { commits: Commit[] } } | 
/**
 * Sent when a commit is successfully cherry-picked
 */
{ type: "commitSynced"; data: { branchName: string; commitHash: string; newHash: string; status: CommitSyncStatus } } | 
/**
 * Sent when a commit fails to cherry-pick
 */
{ type: "commitError"; data: { branchName: string; commitHash: string; error: BranchError } } | 
/**
 * Sent to mark commits as blocked due to earlier error
 */
{ type: "commitsBlocked"; data: { branchName: string; blockedCommitHashes: string[] } } | 
/**
 * Sent when a branch status changes (including during processing and completion)
 */
{ type: "branchStatusUpdate"; data: { branchName: string; status: BranchSyncStatus; error?: BranchError | null } } | 
/**
 * Final completion event
 */
{ type: "completed" }
export type TAURI_CHANNEL<TSend> = null
export type UpdateInfo = { current_version: string; available_version: string; is_update_available: boolean; status: UpdateStatus }
export type UpdateStatus = "Idle" | "Checking" | "Downloading" | "Downloaded" | "Installing" | { Error: string }
export type ValidateRepositoryPathParams = { path: string }
export type WindowError = { message: string }

/** tauri-specta globals **/

import {
	invoke as TAURI_INVOKE,
	Channel as TAURI_CHANNEL,
} from "@tauri-apps/api/core";
import * as TAURI_API_EVENT from "@tauri-apps/api/event";
import { type WebviewWindow as __WebviewWindow__ } from "@tauri-apps/api/webviewWindow";

type __EventObj__<T> = {
	listen: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
	once: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
	emit: null extends T
		? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
		: (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

export type Result<T, E> =
	| { status: "ok"; data: T }
	| { status: "error"; error: E };

function __makeEvents__<T extends Record<string, any>>(
	mappings: Record<keyof T, string>,
) {
	return new Proxy(
		{} as unknown as {
			[K in keyof T]: __EventObj__<T[K]> & {
				(handle: __WebviewWindow__): __EventObj__<T[K]>;
			};
		},
		{
			get: (_, event) => {
				const name = mappings[event as keyof T];

				return new Proxy((() => {}) as any, {
					apply: (_, __, [window]: [__WebviewWindow__]) => ({
						listen: (arg: any) => window.listen(name, arg),
						once: (arg: any) => window.once(name, arg),
						emit: (arg: any) => window.emit(name, arg),
					}),
					get: (_, command: keyof __EventObj__<any>) => {
						switch (command) {
							case "listen":
								return (arg: any) => TAURI_API_EVENT.listen(name, arg);
							case "once":
								return (arg: any) => TAURI_API_EVENT.once(name, arg);
							case "emit":
								return (arg: any) => TAURI_API_EVENT.emit(name, arg);
						}
					},
				});
			},
		},
	);
}
