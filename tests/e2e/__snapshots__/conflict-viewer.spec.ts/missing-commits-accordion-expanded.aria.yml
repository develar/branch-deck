- row:
  - cell:
    - paragraph: Cherry-pick conflict detected
    - paragraph: "Cannot apply: (bug-fix) Implement secure password hashing"
    - paragraph: 2 commits are missing that altered the files in conflict.
    - paragraph: "Common ancestor: 05239cbe (4 commits behind source, 0 commits behind target)"
    - heading "Missing Commits Details" [level=2]
    - button "Unified"
    - button "Split"
    - button "Open in Window"
    - table:
      - rowgroup:
        - row:
          - cell:
            - paragraph: (feature-auth) Add authentication to UserService
            - heading "src/main/kotlin/com/example/service/UserService.kt" [level=3]:
              - button "src/main/kotlin/com/example/service/UserService.kt" [expanded]:
                - button
            - region "src/main/kotlin/com/example/service/UserService.kt":
              - table:
                - rowgroup:
                  - row /@@ -\d+,\d+ \+\d+,\d+ @@ import org\.springframework\.stereotype\.Service/:
                    - cell:
                      - button "Expand Up"
                    - cell /@@ -\d+,\d+ \+\d+,\d+ @@ import org\.springframework\.stereotype\.Service/
                  - row "5 5 @Service":
                    - cell "5 5"
                    - cell "@Service"
                  - 'row "6 6 class UserService {"':
                    - cell "6 6"
                    - 'cell "class UserService {"'
                  - row "7 7 private val users = mutableMapOf<String, User>()":
                    - cell "7 7"
                    - cell "private val users = mutableMapOf<String, User>()"
                  - row "8 + private val tokens = mutableMapOf<String, String>() // token -> userId":
                    - cell "8"
                    - cell "+ private val tokens = mutableMapOf<String, String>() // token -> userId"
                  - row "8 9":
                    - cell "8 9"
                    - cell
                  - 'row /9 \d+ fun getUser\(id: String\): User\? = users\[id\]/':
                    - cell /9 \d+/
                    - 'cell "fun getUser(id: String): User? = users[id]"'
                  - row /\d+ \d+/:
                    - cell /\d+ \d+/
                    - cell
                  - 'row /\d+ - fun createUser\(name: String, email: String\): User \{/':
                    - cell /\d+/
                    - 'cell "- fun createUser(name: String, email: String): User {"'
                  - 'row /\d+ \+ fun createUser\(name: String, email: String, password: String\): User \{/':
                    - cell /\d+/
                    - 'cell "+ fun createUser(name: String, email: String, password: String): User {"'
                  - row /\d+ \d+ val user = User\(/:
                    - cell /\d+ \d+/
                    - cell "val user = User("
                  - row /\d+ \d+ id = generateId\(\),/:
                    - cell /\d+ \d+/
                    - cell "id = generateId(),"
                  - row /\d+ \d+ name = name,/:
                    - cell /\d+ \d+/
                    - cell "name = name,"
                  - row /\d+ - email = email/:
                    - cell /\d+/
                    - cell "- email = email"
                  - row /\d+ \+ email = email,/:
                    - cell /\d+/
                    - cell "+ email = email,"
                  - row /\d+ \+ passwordHash = hashPassword\(password\)/:
                    - cell /\d+/
                    - cell "+ passwordHash = hashPassword(password)"
                  - row /\d+ \d+ \)/:
                    - cell /\d+ \d+/
                    - cell ")"
                  - row /\d+ \d+ users\[user\.id\] = user/:
                    - cell /\d+ \d+/
                    - cell "users[user.id] = user"
                  - row /\d+ \d+ return user/:
                    - cell /\d+ \d+/
                    - cell "return user"
                  - 'row /\d+ \d+ \}/':
                    - cell /\d+ \d+/
                    - 'cell "}"'
                  - row /\d+ \d+/:
                    - cell /\d+ \d+/
                    - cell
                  - 'row /\d+ \+ fun authenticate\(email: String, password: String\): String\? \{/':
                    - cell /\d+/
                    - 'cell "+ fun authenticate(email: String, password: String): String? {"'
                  - 'row /\d+ \+ val user = users\.values\.find \{ it\.email == email \}/':
                    - cell /\d+/
                    - 'cell "+ val user = users.values.find { it.email == email }"'
                  - 'row /\d+ \+ return if \(user != null && verifyPassword\(password, user\.passwordHash\)\) \{/':
                    - cell /\d+/
                    - 'cell "+ return if (user != null && verifyPassword(password, user.passwordHash)) {"'
                  - row /\d+ \+ val token = generateToken\(\)/:
                    - cell /\d+/
                    - cell "+ val token = generateToken()"
                  - row /\d+ \+ tokens\[token\] = user\.id/:
                    - cell /\d+/
                    - cell "+ tokens[token] = user.id"
                  - row /\d+ \+ token/:
                    - cell /\d+/
                    - cell "+ token"
                  - 'row /\d+ \+ \} else null/':
                    - cell /\d+/
                    - 'cell "+ } else null"'
                  - 'row /\d+ \+ \}/':
                    - cell /\d+/
                    - 'cell "+ }"'
                  - row /\d+ \+/:
                    - cell /\d+/
                    - cell "+"
                  - 'row /\d+ \+ fun getUserByToken\(token: String\): User\? \{/':
                    - cell /\d+/
                    - 'cell "+ fun getUserByToken(token: String): User? {"'
                  - 'row /\d+ \+ val userId = tokens\[token\] \?: return null/':
                    - cell /\d+/
                    - 'cell "+ val userId = tokens[token] ?: return null"'
                  - row /\d+ \+ return users\[userId\]/:
                    - cell /\d+/
                    - cell "+ return users[userId]"
                  - 'row /\d+ \+ \}/':
                    - cell /\d+/
                    - 'cell "+ }"'
                  - row /\d+ \+/:
                    - cell /\d+/
                    - cell "+"
                  - 'row /\d+ \d+ private fun generateId\(\): String = "user-\$\{System\.currentTimeMillis\(\)\}"/':
                    - cell /\d+ \d+/
                    - 'cell "private fun generateId(): String = \"user-${System.currentTimeMillis()}\""'
                  - 'row /\d+ \+ private fun generateToken\(\): String = "token-\$\{System\.currentTimeMillis\(\)\}"/':
                    - cell /\d+/
                    - 'cell "+ private fun generateToken(): String = \"token-${System.currentTimeMillis()}\""'
                  - 'row /\d+ \+ private fun hashPassword\(password: String\): String = password\.reversed\(\) \/\/ Simple fake hash/':
                    - cell /\d+/
                    - 'cell "+ private fun hashPassword(password: String): String = password.reversed() // Simple fake hash"'
                  - 'row /\d+ \+ private fun verifyPassword\(password: String, hash: String\): Boolean = password\.reversed\(\) == hash/':
                    - cell /\d+/
                    - 'cell "+ private fun verifyPassword(password: String, hash: String): Boolean = password.reversed() == hash"'
                  - 'row /\d+ \d+ \}/':
                    - cell /\d+ \d+/
                    - 'cell "}"'
                  - row /\d+ \d+/:
                    - cell /\d+ \d+/
                    - cell
                  - row /\d+ \d+ data class User\(/:
                    - cell /\d+ \d+/
                    - cell "data class User("
                  - 'row /\d+ \d+ val id: String,/':
                    - cell /\d+ \d+/
                    - 'cell "val id: String,"'
                  - 'row /\d+ \d+ val name: String,/':
                    - cell /\d+ \d+/
                    - 'cell "val name: String,"'
                  - 'row /\d+ - val email: String/':
                    - cell /\d+/
                    - 'cell "- val email: String"'
                  - 'row /\d+ \+ val email: String,/':
                    - cell /\d+/
                    - 'cell "+ val email: String,"'
                  - 'row /\d+ \+ val passwordHash: String = ""/':
                    - cell /\d+/
                    - 'cell "+ val passwordHash: String = \"\""'
                  - row /\d+ \d+ \)/:
                    - cell /\d+ \d+/
                    - cell ")"
        - row /Add UserService 07cdf0cb • Yesterday 3:\d+ PM • 1 file src\/main\/kotlin\/com\/example\/service\/UserService\.kt/:
          - cell /Add UserService 07cdf0cb • Yesterday 3:\d+ PM • 1 file src\/main\/kotlin\/com\/example\/service\/UserService\.kt/:
            - paragraph: Add UserService
            - heading "src/main/kotlin/com/example/service/UserService.kt" [level=3]:
              - button "src/main/kotlin/com/example/service/UserService.kt":
                - button
    - heading "Resolution Steps" [level=3]
    - paragraph: "To resolve this conflict, you can:"
    - list:
      - listitem: • Include the missing commits in this branch by changing their prefix to match.
      - listitem: • Move the conflicting changes to a different commit or branch.
      - listitem: • Exclude this commit from the branch by changing its prefix.
    - heading "Conflicting Files" [level=2]
    - button "Open in Window"
    - tablist:
      - tab "Diff View" [selected]
      - tab "3-way Merge"
    - tabpanel "Diff View":
      - switch "Conflicts only" [checked]
      - text: Conflicts only
      - button "Unified"
      - button "Split"
    - heading "Missing commits cause conflicts" [level=3]
    - paragraph: This commit cannot be copied to the virtual branch because other commits modified the same files first.
    - paragraph: Apply the missing commits shown above to resolve conflicts automatically.
    - table:
      - rowgroup:
        - row:
          - cell:
            - paragraph: Implement secure password hashing
            - paragraph: Cherry-pick conflict detected
            - paragraph: "Cannot apply: (bug-fix) Implement secure password hashing"
            - paragraph: 2 commits are missing that altered the files in conflict.
            - paragraph: "Common ancestor: 05239cbe (4 commits behind source, 0 commits behind target)"
            - heading "Missing Commits Details" [level=2]
            - button "Unified"
            - button "Split"
            - button "Open in Window"
            - table:
              - rowgroup:
                - row /\(feature-auth\) Add authentication to UserService abd07ec1 • Yesterday 4:\d+ PM • 1 file src\/main\/kotlin\/com\/example\/service\/UserService\.kt/:
                  - cell /\(feature-auth\) Add authentication to UserService abd07ec1 • Yesterday 4:\d+ PM • 1 file src\/main\/kotlin\/com\/example\/service\/UserService\.kt/:
                    - paragraph: (feature-auth) Add authentication to UserService
                    - heading "src/main/kotlin/com/example/service/UserService.kt" [level=3]:
                      - button "src/main/kotlin/com/example/service/UserService.kt":
                        - button
                - row /Add UserService 07cdf0cb • Yesterday 3:\d+ PM • 1 file src\/main\/kotlin\/com\/example\/service\/UserService\.kt/:
                  - cell /Add UserService 07cdf0cb • Yesterday 3:\d+ PM • 1 file src\/main\/kotlin\/com\/example\/service\/UserService\.kt/:
                    - paragraph: Add UserService
                    - heading "src/main/kotlin/com/example/service/UserService.kt" [level=3]:
                      - button "src/main/kotlin/com/example/service/UserService.kt":
                        - button
            - heading "Resolution Steps" [level=3]
            - paragraph: "To resolve this conflict, you can:"
            - list:
              - listitem: • Include the missing commits in this branch by changing their prefix to match.
              - listitem: • Move the conflicting changes to a different commit or branch.
              - listitem: • Exclude this commit from the branch by changing its prefix.
            - heading "Conflicting Files" [level=2]
            - button "Open in Window"
            - tablist:
              - tab "Diff View" [selected]
              - tab "3-way Merge"
            - tabpanel "Diff View":
              - switch "Conflicts only" [checked]
              - text: Conflicts only
              - button "Unified"
              - button "Split"
            - heading "Missing commits cause conflicts" [level=3]
            - paragraph: This commit cannot be copied to the virtual branch because other commits modified the same files first.
            - paragraph: Apply the missing commits shown above to resolve conflicts automatically.